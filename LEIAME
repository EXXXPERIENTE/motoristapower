python manage.py runserver 0.0.0.0:8000C

python manage.py runserver


üìö TUTORIAL COMPLETO: Deploy Django no Railway
üéØ RESUMO DO QUE FOI FEITO
‚úÖ PROBLEMAS RESOLVIDOS:
Vari√°veis de ambiente (DEBUG e SECRET_KEY)

Depend√™ncias faltantes (openpyxl, reportlab, python-decouple)

Conflito de URLs

Configura√ß√£o do settings.py para produ√ß√£o

üìã PASSO A PASSO COMPLETO
1. üõ†Ô∏è PREPARA√á√ÉO DO PROJETO
A. requirements.txt (CR√çTICO)
txt
Django==5.2.7
whitenoise==6.6.0
dj-database-url==2.1.0
gunicorn==21.2.0
psycopg2-binary==2.9.9
openpyxl==3.1.2
python-decouple==3.8
reportlab==4.1.0
B. settings.py para produ√ß√£o
python
import os
from pathlib import Path
from decouple import config
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent

# ‚úÖ CONFIGURA√á√ïES OBRIGAT√ìRIAS
SECRET_KEY = config('SECRET_KEY', default='chave-temporaria')
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '.railway.app',
    '.up.railway.app',
]

# ‚úÖ DATABASE
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(
        conn_max_age=600,
        ssl_require=True
    )

# ‚úÖ STATIC FILES
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ‚úÖ MIDDLEWARE (IMPORTANTE)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ‚Üê DEVE VIR DEPOIS DO SECURITY
    # ... outros middlewares
]

# ‚úÖ SEGURAN√áA EM PRODU√á√ÉO
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
C. URLs Configuradas
fleet/urls.py:

python
from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect

def redirect_to_cadastro(request):
    return redirect('drivers:cadastro_motorista')

urlpatterns = [
    path('admin/', admin.site.urls),
    path('drivers/', include('drivers.urls', namespace='drivers')),
    path('', redirect_to_cadastro, name='home'),
]
drivers/urls.py:

python
from django.urls import path
from . import views

app_name = 'drivers'

urlpatterns = [
    path('dashboard/', views.dashboard_view, name='dashboard'),
    path('motoristas/', views.MotoristaListView.as_view(), name='motorista_list'),
    path('cadastro/', views.cadastro_motorista_view, name='cadastro_motorista'),
    # ... outras rotas
]
D. Procfile (OPCIONAL)
text
web: python manage.py migrate && gunicorn fleet.wsgi:application --bind 0.0.0.0:$PORT
2. üöÄ DEPLOY NO RAILWAY
A. Criar Projeto
Acesse railway.app

New Project ‚Üí Deploy from GitHub repo

Conecte seu reposit√≥rio

O deploy inicia automaticamente

B. Vari√°veis de Ambiente (OBRIGAT√ìRIO)
No Railway ‚Üí Variables ‚Üí New Variable:

text
DEBUG = False
SECRET_KEY = sua-chave-super-secreta-aqui
Para gerar SECRET_KEY:

bash
python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
C. Monitorar Deploy
Deployments: Status do deploy

Deploy Logs: Erros durante execu√ß√£o

Build Logs: Erros durante constru√ß√£o

3. üîß SOLU√á√ÉO DE PROBLEMAS COMUNS
ERRO: "secret DEBUG: not found"
‚ùå CAUSA: Vari√°veis n√£o configuradas no Railway

‚úÖ SOLU√á√ÉO: Adicionar DEBUG e SECRET_KEY nas Variables

ERRO: "ModuleNotFoundError"
‚ùå CAUSA: Pacote faltando no requirements.txt

‚úÖ SOLU√á√ÉO: Adicionar pacote no requirements.txt e fazer push

ERRO: "Not Found" (404)
‚ùå CAUSA: URLs mal configuradas

‚úÖ SOLU√á√ÉO: Verificar fleet/urls.py e drivers/urls.py

ERRO: "Application didn't respond"
‚ùå CAUSA: Django n√£o iniciou corretamente

‚úÖ SOLU√á√ÉO: Verificar Deploy Logs para ver erro espec√≠fico

4. üìù FLUXO DE TRABALHO
A. Desenvolvimento Local
bash
# 1. Desenvolver
git add .
git commit -m "mensagem"
git push

# 2. Testar localmente
python manage.py runserver
B. Deploy Produ√ß√£o
bash
# 1. Verificar requirements.txt
# 2. Verificar settings.py
# 3. Fazer push
git add .
git commit -m "preparando deploy"
git push

# 4. No Railway: Configurar vari√°veis
# 5. Monitorar deploy
5. üé® CHECKLIST PR√â-DEPLOY
‚úÖ ANTES DE FAZER PUSH:
requirements.txt com TODAS as depend√™ncias

DEBUG = False no settings.py

ALLOWED_HOSTS configurado

whitenoise no middleware

URLs testadas localmente

Migrations aplicadas

‚úÖ DEPOIS DO PUSH:
Configurar vari√°veis no Railway

Verificar Build Logs

Verificar Deploy Logs

Testar site online

6. üîó LINKS √öTEIS
Railway Dashboard: https://railway.app

Seu Site: https://[nome-do-projeto].up.railway.app

Documenta√ß√£o Django: https://docs.djangoproject.com

Documenta√ß√£o Railway: https://docs.railway.app

üí° DICAS FINAIS
üö® NUNCA ESQUE√áA:
SEMPRE configurar DEBUG e SECRET_KEY no Railway

SEMPRE verificar o requirements.txt completo

SEMPRE testar as URLs localmente primeiro

SEMPRE verificar os logs quando der erro

üéØ PR√ìXIMA VEZ SER√Å MAIS F√ÅCIL:
Use este tutorial como refer√™ncia

Copie o settings.py configurado

Mantenha o requirements.txt atualizado

Siga o checklist

Agora voc√™ √© um expert em deploy Django no Railway! üéìüöÄ


